///// Main Code
close("*");

input = getDirectory("Select Folder with Example Images for Deconvolution/Segmentation: ");
output = getDirectory("Select Folder for Output images and data: ");

// Create point spread function based on known imaging acquisiton parameters
run("Diffraction PSF 3D", "index=1.330 numerical=0.80 wavelength=561 longitudinal=0 image=162.5 slice=1000 width,=54 height,=93 depth,=28 normalization=[Sum of pixel values = 1] title=PSF");
run("Duplicate...", "title=PSF_Dup duplicate channels=2-2");
saveAs("Tiff", output + "PSF.tif");
close("PSF_Dup");

// Open Image, get title and image dimensions
open(input + "NeuroTracker3D_Demo.tif");
ImageTitle = getTitle();
shortImageTitle = replace(ImageTitle, ".tif", "");
run("Duplicate...", "title=C2_Dup duplicate channels=2-2");

Stack.getDimensions(width, height, channels, slices, frames);

// Loop through each frame
for (i = 0; i < frames; i++) {
//for (i = 0; i < 2; i++) { // For testing purposes
	// Create Blank Images for concatenation
	if (i == 0) {
		newImage("OGStackConcat", "8-bit black", width, height, slices);
		newImage("BlurredStackConcat", "8-bit black", width, height, slices);
		newImage("BlurredStackSegmentedConcat", "8-bit black", width, height, slices);
		newImage("DeconvolutedBlurredStackConcat", "32-bit black", width, height, slices);
		newImage("DeconvolutedBlurredStackSegmentedConcat", "8-bit black", width, height, slices);
		newImage("RDARDeconvolutedBlurredStackSegmentedConcat", "8-bit black", width, height, slices);
	}
	
	close("Fr*");
	p = i+1;
	radius = 1;
	
	// Crete single volume image stack of the RFP signal
	selectWindow("C2_Dup");
	run("8-bit");
	run("Duplicate...", "title=C2_Dup_SingleVolume duplicate frames=p-p");
	
	// Step 1: Duplicate and concatenate to OG stack
	selectWindow("C2_Dup_SingleVolume");
	run("Duplicate...", "title=Dup duplicate");
	run("Concatenate...", "  title=OGStackConcat open image1=OGStackConcat image2=Dup image3=[-- None --]");
	close("Dup");
	
	// Step 2: Duplicate and concatenate blurred image to blurred stack
	selectWindow("C2_Dup_SingleVolume");
	run("Median 3D...", "x=1 y=1 z=1");
	run("Duplicate...", "title=Dup duplicate");
	run("Concatenate...", "  title=BlurredStackConcat open image1=BlurredStackConcat image2=Dup image3=[-- None --]");
	close("Dup");
	
	// Step 3: Run 3D nuclei segmentation on Frame 1 original volume
	selectWindow("C2_Dup_SingleVolume");
	run("3D Nuclei Segmentation", "auto_threshold=Default manual=0 separate_nuclei");
	selectWindow("merge");
	run("8-bit");
	run("Duplicate...", "title=Dup duplicate");
	run("Concatenate...", "  title=BlurredStackSegmentedConcat open image1=BlurredStackSegmentedConcat image2=Dup image3=[-- None --]");
	close("Dup");
	close("merge");
	closeWin("Log");
	
	// Step 4: Run single-view deconvolution on image stacks
	selectWindow("C2_Dup_SingleVolume");
	// Job: Job
	// Macro generated by DeconvolutionLab2
	// 19/04/22 00:6:6
	image = " -image platform C2_Dup_SingleVolume";
	psf = " -psf platform PSF";
	algorithm = " -algorithm RL 10";
	parameters = "";
	parameters += " -monitor no";
	parameters += " -verbose quiet";
	run("DeconvolutionLab2 Run", image + psf + algorithm + parameters);
	selectWindow("Final Display of RL");
	//run("8-bit");
	run("Duplicate...", "title=Dup duplicate");
	run("Concatenate...", "  title=DeconvolutedBlurredStackConcat open image1=DeconvolutedBlurredStackConcat image2=Dup image3=[-- None --]");
	close("Dup");
	
	// Step 5: Run 3D nuclei segmentation on deconvoluted stack
	selectWindow("Final Display of RL");
	run("8-bit");
	run("Median 3D...", "x=1 y=1 z=1");
	run("3D Nuclei Segmentation", "auto_threshold=Default manual=0 separate_nuclei");
	//close("Dup");
	selectWindow("merge");
	run("8-bit");
	run("Duplicate...", "title=Dup2 duplicate");
	run("Concatenate...", "  title=DeconvolutedBlurredStackSegmentedConcat open image1=DeconvolutedBlurredStackSegmentedConcat image2=Dup2 image3=[-- None --]");
	close("Dup2");
	
	// Step 6: Run RDAR algorithm on deconvoluted segmented stack
	selectWindow("merge");
	run("3D RDAR", "min=50 display");
	close("Parts*");
	selectWindow("Ellipsoid");
	run("8-bit");
	run("Duplicate...", "title=Dup duplicate");
	run("Concatenate...", "  title=RDARDeconvolutedBlurredStackSegmentedConcat open image1=RDARDeconvolutedBlurredStackSegmentedConcat image2=Dup image3=[-- None --]");
	
	// Close unnecessary image windows and log window
	
	close("Dup");
	close("merge");
	close("Ellipsoid");
	close("C2_Dup_SingleVolume");
	close("Final Display of RL");
	closeWin("Log");
	
}



// Get results stack dimensions to allow removal of frame 1
selectWindow("OGStackConcat");
Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);

// Remove empty image at beginning of each results stack
/// From Step 1
selectWindow("OGStackConcat");
run("Duplicate...", "title=OGStack duplicate frames=2-framesR");
close("OGStackConcat");
selectWindow("OGStack");
img = getTitle();
run("Duplicate...", "title=Dup duplicate");
saveAs("Tiff", output + img + ".tif");

/// From Step 2
selectWindow("BlurredStackConcat");
run("Duplicate...", "title=BlurredStack duplicate frames=2-framesR");
close("BlurredStackConcat");
selectWindow("BlurredStack");
img = getTitle();
run("Duplicate...", "title=Dup duplicate");
saveAs("Tiff", output + img + ".tif");

/// From Step 3
selectWindow("BlurredStackSegmentedConcat");
run("Duplicate...", "title=BlurredStackSegmented duplicate frames=2-framesR");
close("BlurredStackSegmentedConcat");
selectWindow("BlurredStackSegmented");
img = getTitle();
run("Duplicate...", "title=Dup duplicate");
saveAs("Tiff", output + img + ".tif");

/// From Step 4
selectWindow("DeconvolutedBlurredStackConcat");
run("Duplicate...", "title=DeconvolutedBlurredStack duplicate frames=2-framesR");
close("DeconvolutedBlurredStackConcat");
selectWindow("DeconvolutedBlurredStack");
img = getTitle();
run("Duplicate...", "title=Dup duplicate");
saveAs("Tiff", output + img + ".tif");

/// From Step 5
selectWindow("DeconvolutedBlurredStackSegmentedConcat");
run("Duplicate...", "title=DeconvolutedBlurredStackSegmented duplicate frames=2-framesR");
close("DeconvolutedBlurredStackSegmentedConcat");
selectWindow("DeconvolutedBlurredStackSegmented");
img = getTitle();
run("Duplicate...", "title=Dup duplicate");
saveAs("Tiff", output + img + ".tif");

/// From Step 6
selectWindow("RDARDeconvolutedBlurredStackSegmentedConcat");
run("Duplicate...", "title=RDARDeconvolutedBlurredStackSegmented duplicate frames=2-framesR");
close("RDARDeconvolutedBlurredStackSegmentedConcat");
selectWindow("RDARDeconvolutedBlurredStackSegmented");
img = getTitle();
run("Duplicate...", "title=Dup duplicate");
saveAs("Tiff", output + img + ".tif");

// Close unnecessary segmentation windows
close("*.tif");
close("*Concat");
close("OGStack");
close("BlurredStack");
close("DeconvolutedBlurredStack");
close("PSF");
close("C2_Dup");

// Analyze Segmented Images and Determine Centroids, Volumes, Surfaces and Intensitites
/// Get current results stacks dimensions
selectWindow("BlurredStackSegmented");
Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);

/// Centroids
run("Clear Results");
selectWindow("BlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Centroid");
}
selectWindow("DeconvolutedBlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Centroid");
}
selectWindow("RDARDeconvolutedBlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Centroid");
}
saveAs("Results", output+"Centroids.txt");

/// Volumes
run("Clear Results");
selectWindow("BlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Volume");
}
selectWindow("DeconvolutedBlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Volume");
}
selectWindow("RDARDeconvolutedBlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Volume");
}
saveAs("Results", output+"Volumes.txt");

/// Surfaces
run("Clear Results");
selectWindow("BlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Surface");
}
selectWindow("DeconvolutedBlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Surface");
}
selectWindow("RDARDeconvolutedBlurredStackSegmented");
//Stack.getDimensions(widthR, heightR, channelsR, slicesR, framesR);
for (i = 0; i < framesR; i++) {
	Stack.setFrame(i+1);
	run("3D Surface");
}
saveAs("Results", output+"Surfaces.txt");

/// Red Channel Intensities
run("Clear Results");
open(input + "NeuroTracker3D_Demo.tif");
run("Duplicate...", "title=C1_Dup duplicate channels=2-2");
for (i = 0; i < framesR; i++) {
	selectWindow("C1_Dup");
	Stack.setFrame(i+1);
	selectWindow("BlurredStackSegmented");
	Stack.setFrame(i+1);
	run("3D Intensity Measure", "objects=BlurredStackSegmented signal=C1_Dup");
}
for (i = 0; i < framesR; i++) {
	selectWindow("C1_Dup");
	Stack.setFrame(i+1);
	selectWindow("DeconvolutedBlurredStackSegmented");
	Stack.setFrame(i+1);
	run("3D Intensity Measure", "objects=DeconvolutedBlurredStackSegmented signal=C1_Dup");
}
for (i = 0; i < framesR; i++) {
	selectWindow("C1_Dup");
	Stack.setFrame(i+1);
	selectWindow("RDARDeconvolutedBlurredStackSegmented");
	Stack.setFrame(i+1);
	run("3D Intensity Measure", "objects=RDARDeconvolutedBlurredStackSegmented signal=C1_Dup");
}
saveAs("Results", output+"RedIntensities.txt");
close("C1_Dup");

/// Green Channel Intensities
run("Clear Results");
open(input + "NeuroTracker3D_Demo.tif");
run("Duplicate...", "title=C1_Dup duplicate channels=1-1");
run("TransformJ Translate", "x-distance=5.0 y-distance=0.0 z-distance=0.0 interpolation=Linear background=0.0");
selectWindow("C1_Dup translated");
rename("C1_Dup");
for (i = 0; i < framesR; i++) {
	selectWindow("C1_Dup");
	Stack.setFrame(i+1);
	selectWindow("BlurredStackSegmented");
	Stack.setFrame(i+1);
	run("3D Intensity Measure", "objects=BlurredStackSegmented signal=C1_Dup");
}
for (i = 0; i < framesR; i++) {
	selectWindow("C1_Dup");
	Stack.setFrame(i+1);
	selectWindow("DeconvolutedBlurredStackSegmented");
	Stack.setFrame(i+1);
	run("3D Intensity Measure", "objects=DeconvolutedBlurredStackSegmented signal=C1_Dup");
}
for (i = 0; i < framesR; i++) {
	selectWindow("C1_Dup");
	Stack.setFrame(i+1);
	selectWindow("RDARDeconvolutedBlurredStackSegmented");
	Stack.setFrame(i+1);
	run("3D Intensity Measure", "objects=RDARDeconvolutedBlurredStackSegmented signal=C1_Dup");
}
saveAs("Results", output+"GreenIntensities.txt");
close("C1_Dup");


///// Functions
function closeWin(name) {
	if (isOpen(name)) {
	     selectWindow(name);
	     run("Close");
	}
}

function moveWin(name, xloc, yloc) {
	if (isOpen(name)) {
	     selectWindow(name);
	     setLocation(xloc, yloc);
	}
}
